version: '3'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.0-python3.9}
  build:
    context: ./docker/airflow
    dockerfile: ./airflow.dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_CONN_SPARK_CONNECTION: 'spark://spark%3A%2F%2Fspark-master:7077'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./spark/app:/usr/local/spark/app
    - ./covid_data:/usr/share/covid_data
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - common-network
  profiles:
    - pipeline
    - airflow
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - common-network
    profiles:
      - pipeline
      - airflow

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - 8080:8080
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    container_name: airflow-triggerer
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/sources

  spark-master:
    image: apache/spark-py:v3.1.3
    container_name: spark-master
    hostname: spark-master
    ports:
      - "4040:8080"
      - "7077:7077"
      - "6066:6066"
    environment:
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_HOST=spark-master
    networks:
      - common-network
    command: ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.master.Master"]
    volumes:
      - ./spark/app:/usr/local/spark/app
      - ./covid_data:/usr/share/covid_data
    profiles:
      - pipeline
      - spark

  spark-worker:
    image: apache/spark-py:v3.1.3
    container_name: spark-worker
    hostname: spark-worker
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_DIR=/tmp/spark
    command: ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077"]
    networks:
      - common-network
    volumes:
      - ./covid_data:/usr/share/covid_data
    profiles:
      - pipeline
      - spark

  namenode:
    image: apache/hadoop:3
    command: ["hdfs", "namenode"]
    container_name: namenode
    environment:
      ENSURE_NAMENODE_DIR: "/hadoop/dfs/name"
      #ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    env_file:
      - ./docker/hadoop/config
    ports:
      - "9870:9870"
    networks:
      - common-network
    volumes:
      - ./covid_data/namenode:/hadoop/dfs/name
    profiles:
      - pipeline
      - hadoop

  datanode:
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    container_name: datanode
    env_file:
      - ./docker/hadoop/config
    networks:
      - common-network
    depends_on:
      - namenode
    volumes:
      - ./covid_data/datanode:/hadoop/dfs/data
    profiles:
      - pipeline
      - hadoop

  hive-postgres:
    image: postgres:13
    restart: unless-stopped
    container_name: hive-postgres
    hostname: hive-postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "hive", '-d', 'metastore_db']
      interval: 5s
      retries: 5
    environment:
      POSTGRES_USER: 'hive'
      POSTGRES_PASSWORD: 'password'
      POSTGRES_DB: 'metastore_db'
    volumes:
      - hive-db-volume:/var/lib/postgresql/data
    networks:
      - common-network
    profiles:
      - pipeline
      - hive

  hive-metastore:
    image: apache/hive:3.1.3
    container_name: hive-metastore
    hostname: hive-metastore
    restart: unless-stopped
    build:
      context: docker/hive
      dockerfile: hive.dockerfile
    entrypoint: ["/opt/hive/init/init-hive-db.sh"]
    healthcheck:
      test: nc -zv localhost 9083
      interval: 30s
      retries: 5
    environment:
      SERVICE_NAME: 'metastore'
      DB_DRIVER: postgres
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://hive-postgres:5432/metastore_db -Djavax.jdo.option.ConnectionUserName=hive -Djavax.jdo.option.ConnectionPassword=password"
    ports:
      - "9083:9083"
    networks:
      - common-network
    volumes:
        - warehouse:/opt/hive/data/warehouse
    profiles:
      - pipeline
      - hive
    depends_on:
      hive-postgres:
        condition: service_healthy

  hive-server:
    image: apache/hive:3.1.3
    container_name: hive-server
    hostname: hive-server
    restart: unless-stopped
    build:
      context: docker/hive
      dockerfile: hive.dockerfile
    entrypoint: ["/opt/hive/init/init-hive-db.sh"]
    environment:
      HIVE_SERVER2_THRIFT_PORT: 10000
      SERVICE_NAME: 'hiveserver2'
      SERVICE_OPTS: "-Dhive.metastore.uris=thrift://hive-metastore:9083"
      IS_RESUME: 'true'
    ports:
      - "10000:10000"
      - "10002:10002"
    networks:
      - common-network
    profiles:
      - pipeline
      - hive
    volumes:
      - warehouse:/opt/hive/data/warehouse
    depends_on:
      hive-metastore:
        condition: service_healthy

  superset:
    image: apache/superset:2.1.0
    build:
      context: ./docker/superset
      dockerfile: ./superset.dockerfile
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@superset.com
      - ADMIN_PASSWORD=admin
    ports:
      - "8088:8088"
    networks:
      - common-network
    profiles:
      - superset
  zeppelin:
    image: apache/zeppelin:0.10.1
    container_name: zeppelin
    hostname: zeppelin
    build:
      context: ./docker/zeppelin
      dockerfile: ./zeppelin.dockerfile
    ports:
      - "2020:8080"
    volumes:
      - ./spark:/zeppelin/spark
      - ./notebooks:/zeppelin/notebook
    environment:
      - "MASTER=spark://spark-master:7077"
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - common-network
    depends_on:
      - spark-master
    profiles:
      - zeppelin

volumes:
  airflow-db-volume:
  common-files:
  hive-db-volume:
  namenode-data:
  datanode-data:
  warehouse:

networks:
  common-network:
    name: common-network
